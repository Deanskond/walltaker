class Friendship < ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[Friendship, ActiveRecord_Relation, Integer]

  attr_accessor id(): Integer
  def id_changed?: () -> bool
  def id_change: () -> [ Integer?, Integer? ]
  def id_will_change!: () -> void
  def id_was: () -> Integer?
  def id_previously_changed?: () -> bool
  def id_previous_change: () -> Array[Integer?]?
  def id_previously_was: () -> Integer?
  def id_before_last_save: () -> Integer?
  def id_change_to_be_saved: () -> Array[Integer?]?
  def id_in_database: () -> Integer?
  def saved_change_to_id: () -> Array[Integer?]?
  def saved_change_to_id?: () -> bool
  def will_save_change_to_id?: () -> bool
  def restore_id!: () -> void
  def clear_id_change: () -> void

  attr_accessor sender_id(): Integer
  def sender_id_changed?: () -> bool
  def sender_id_change: () -> [ Integer?, Integer? ]
  def sender_id_will_change!: () -> void
  def sender_id_was: () -> Integer?
  def sender_id_previously_changed?: () -> bool
  def sender_id_previous_change: () -> Array[Integer?]?
  def sender_id_previously_was: () -> Integer?
  def sender_id_before_last_save: () -> Integer?
  def sender_id_change_to_be_saved: () -> Array[Integer?]?
  def sender_id_in_database: () -> Integer?
  def saved_change_to_sender_id: () -> Array[Integer?]?
  def saved_change_to_sender_id?: () -> bool
  def will_save_change_to_sender_id?: () -> bool
  def restore_sender_id!: () -> void
  def clear_sender_id_change: () -> void

  attr_accessor receiver_id(): Integer?
  def receiver_id_changed?: () -> bool
  def receiver_id_change: () -> [ Integer?, Integer? ]
  def receiver_id_will_change!: () -> void
  def receiver_id_was: () -> Integer?
  def receiver_id_previously_changed?: () -> bool
  def receiver_id_previous_change: () -> Array[Integer?]?
  def receiver_id_previously_was: () -> Integer?
  def receiver_id_before_last_save: () -> Integer?
  def receiver_id_change_to_be_saved: () -> Array[Integer?]?
  def receiver_id_in_database: () -> Integer?
  def saved_change_to_receiver_id: () -> Array[Integer?]?
  def saved_change_to_receiver_id?: () -> bool
  def will_save_change_to_receiver_id?: () -> bool
  def restore_receiver_id!: () -> void
  def clear_receiver_id_change: () -> void

  attr_accessor created_at(): ActiveSupport::TimeWithZone
  def created_at_changed?: () -> bool
  def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]
  def created_at_will_change!: () -> void
  def created_at_was: () -> ActiveSupport::TimeWithZone?
  def created_at_previously_changed?: () -> bool
  def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?
  def created_at_previously_was: () -> ActiveSupport::TimeWithZone?
  def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?
  def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?
  def created_at_in_database: () -> ActiveSupport::TimeWithZone?
  def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?
  def saved_change_to_created_at?: () -> bool
  def will_save_change_to_created_at?: () -> bool
  def restore_created_at!: () -> void
  def clear_created_at_change: () -> void

  attr_accessor updated_at(): ActiveSupport::TimeWithZone
  def updated_at_changed?: () -> bool
  def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]
  def updated_at_will_change!: () -> void
  def updated_at_was: () -> ActiveSupport::TimeWithZone?
  def updated_at_previously_changed?: () -> bool
  def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?
  def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?
  def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?
  def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?
  def updated_at_in_database: () -> ActiveSupport::TimeWithZone?
  def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?
  def saved_change_to_updated_at?: () -> bool
  def will_save_change_to_updated_at?: () -> bool
  def restore_updated_at!: () -> void
  def clear_updated_at_change: () -> void

  attr_accessor confirmed(): bool?
  def confirmed_changed?: () -> bool
  def confirmed_change: () -> [ bool?, bool? ]
  def confirmed_will_change!: () -> void
  def confirmed_was: () -> bool?
  def confirmed_previously_changed?: () -> bool
  def confirmed_previous_change: () -> Array[bool?]?
  def confirmed_previously_was: () -> bool?
  def confirmed_before_last_save: () -> bool?
  def confirmed_change_to_be_saved: () -> Array[bool?]?
  def confirmed_in_database: () -> bool?
  def saved_change_to_confirmed: () -> Array[bool?]?
  def saved_change_to_confirmed?: () -> bool
  def will_save_change_to_confirmed?: () -> bool
  def restore_confirmed!: () -> void
  def clear_confirmed_change: () -> void
  attr_accessor confirmed?(): bool

  def sender: () -> User
  def sender=: (User?) -> User?
  def reload_sender: () -> User?
  def build_sender: (untyped) -> User
  def create_sender: (untyped) -> User
  def create_sender!: (untyped) -> User
  def receiver: () -> User
  def receiver=: (User?) -> User?
  def reload_receiver: () -> User?
  def build_receiver: (untyped) -> User
  def create_receiver: (untyped) -> User
  def create_receiver!: (untyped) -> User

  module GeneratedRelationMethods
  end

  class ActiveRecord_Relation < ActiveRecord::Relation
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[Friendship, Integer]
    include Enumerable[Friendship]
  end

  class ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[Friendship, Integer]
  end
end
